import requests, threading, os, base64, datetime, time

# == إعدادات GitHub ==
GITHUB_TOKEN = "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"
USERNAME = "xxxxxthefox"
REPO = "ffoe"
FILE_NAME = "Chat"
API_URL = f"https://api.github.com/repos/{USERNAME}/{REPO}/contents/{FILE_NAME}"
COMMIT_MESSAGE = "📦 تحديث محادثة"

# == ملفات التخزين ==
CACHE_FILE = "المحادثة.txt"
USERNAME_FILE = "username.txt"
LOG_FILE = "سجل_الرسائل.txt"
BACKUP_FILE = "نسخة_احتياطية.txt"

# == متغيرات ==
آخر_نص = ""
آخر_sha = None
آخر_إرسال = 0
lock = threading.Lock()

# 🧠 حفظ الاسم مرة واحدة فقط
def get_username():
    if os.path.exists(USERNAME_FILE):
        return open(USERNAME_FILE, "r", encoding="utf-8").read().strip()
    name = input("📛 أدخل اسمك لبدء المحادثة (لن يمكنك تغييره لاحقًا): ").strip()
    with open(USERNAME_FILE, "w", encoding="utf-8") as f:
        f.write(name)
    return name

user_name = get_username()

# 🛠️ جلب محتوى الملف من GitHub
def get_current_content():
    try:
        res = requests.get(API_URL, headers={"Authorization": f"token {GITHUB_TOKEN}"}, timeout=10)
        if res.status_code == 200:
            j = res.json()
            content = base64.b64decode(j['content']).decode(errors='ignore')
            sha = j['sha']
            return content.strip(), sha
        elif res.status_code == 404:
            return "", None
        else:
            print(f"❌ خطأ GitHub: {res.status_code} - {res.text}")
            return "", None
    except Exception as e:
        print(f"⚠️ استثناء أثناء الجلب: {e}")
        return "", None

# 🚀 إرسال الرسالة ورفعها إلى GitHub
def update_chat_file(new_content, sha):
    try:
        encoded = base64.b64encode(new_content.encode()).decode()
        data = {
            "message": COMMIT_MESSAGE,
            "content": encoded,
            "sha": sha
        }
        with lock:
            res = requests.put(API_URL, json=data, headers={
                "Authorization": f"token {GITHUB_TOKEN}",
                "Content-Type": "application/json"
            }, timeout=10)
        return res.status_code in [200, 201]
    except Exception as e:
        print(f"⚠️ استثناء أثناء التحديث: {e}")
        return False

# 📨 إرسال رسالة
def send_message(msg):
    global آخر_إرسال
    الآن = time.time()
    if الآن - آخر_إرسال < 0.3:
        print("⏳ الرجاء الانتظار قليلًا قبل إرسال رسالة جديدة.")
        return
    آخر_إرسال = الآن
    now = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
    current, sha = get_current_content()
    new_line = f"[{now}][{user_name}]: {msg}"
    updated = current + "\n" + new_line if current else new_line
    if update_chat_file(updated, sha):
        print("✅ تم إرسال الرسالة.")
        سجل_محلي(new_line)
    else:
        print("❌ فشل في إرسال الرسالة.")

# 💾 سجل محلي لكل رسالة
def سجل_محلي(سطر):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(سطر + "\n")

# 🌐 تحميل الرسائل إذا تغير sha فقط
def تحميل_الرسائل_لو_تغيرت():
    global آخر_sha
    try:
        res = requests.get(API_URL, headers={"Authorization": f"token {GITHUB_TOKEN}"}, timeout=5)
        if res.status_code == 200:
            j = res.json()
            sha = j["sha"]
            if sha == آخر_sha:
                return None
            آخر_sha = sha
            content = base64.b64decode(j['content']).decode(errors='ignore')
            return content
        return None
    except Exception as e:
        if os.path.exists(BACKUP_FILE):
            return open(BACKUP_FILE, "r", encoding="utf-8").read()
        return f"[❌ انقطاع الاتصال]: {e}"

# 📋 عرض الرسائل بشكل جميل
def عرض_الرسائل(نص):
    os.system("cls" if os.name == "nt" else "clear")
    print("\n" + "="*60)
    print(f" دردشة خاصه | بواسطة xxxxxTheFox@\n")
    print(نص.strip())
    print("="*60 + "\n💬 اكتب رسالتك أدناه:")

# 🔄 تحديث حي للرسائل فقط عند التغيير
def تحديث_الرسائل_حيًا():
    global آخر_نص
    while True:
        الرسائل = تحميل_الرسائل_لو_تغيرت()
        if الرسائل is not None and الرسائل != آخر_نص:
            آخر_نص = الرسائل
            عرض_الرسائل(الرسائل)
            with open(CACHE_FILE, "w", encoding="utf-8") as f:
                f.write(الرسائل)
            with open(BACKUP_FILE, "w", encoding="utf-8") as f:
                f.write(الرسائل)
        time.sleep(0.5)  # تحديث سريع لكن آمن

# 🧑‍💻 واجهة المستخدم للدردشة
def الدردشة():
    print(f"\n🎤 مرحبًا {user_name}! اكتب رسالتك (exit للخروج):\n")
    while True:
        msg = input("> ").strip()
        if msg.lower() == "exit":
            print("👋 تم إنهاء الدردشة.")
            break
        if not msg:
            continue
        if len(msg) > 500:
            print("🚫 الرسالة طويلة جدًا.")
            continue
        send_message(msg)

# 🚀 تشغيل البرنامج
if __name__ == "__main__":
    threading.Thread(target=تحديث_الرسائل_حيًا, daemon=True).start()
    time.sleep(0.5)
    الدردشة()
